(defwidget bell []
  (eventbox 
    :class "bell button"
    :onhover "eww update bell_rev=true"
    :onhoverlost "eww update bell_rev=false"
    :onclick "actions notifications"
    :cursor "pointer"
    (box
      :class "bell"
      :space-evenly false
      (revealer 
        :transition "slideleft"
        :reveal {bell_rev || arraylength(notifications.popups) != 0} 
        (label 
          :class "bell count" 
          :visible {notifications.count > 0}
          :text {notifications.notifications[0].summary}
          :limit-width 15
        )
      )
      (overlay
        (button 
          :class "icon ${notifications.count > 0 ? "" : "nothing"}"
          :onclick "actions notifications"
          ""
        )
        (label
          :class "bell indicator"
          :visible {notifications.count > 0}
          :valign "start" :halign "end"
          :text "" :xalign 0
        )
      )
    )
  )
)

(defwidget app []
  (box 
    :class "app" 
    :space-evenly false 
    :spacing 5 
    :visible {hyprland["class"].app_name != "null"}
    (label 
      :class "icon ${hyprland["class"].app_name}" 
      :text {hyprland["class"].app_icon} 
      :visible {hyprland["class"].app_icon != "null"}
    )
    (label :class "name" :text {hyprland["class"].app_name} :limit-width 20)
  )
)

(defwidget clock []
  (eventbox :class "date button" :cursor "pointer" 
    :onclick "actions calendar"
    (box :class "date" :space-evenly false :spacing 10
      (box :class "clock" :space-evenly false :spacing 3
        (label :class "clock hour" :text {formattime(EWW_TIME, "%H", "America/Sao_Paulo")})
        (label :class "clock ellipsis" :text ":")
        (label :class "clock minute" :text {formattime(EWW_TIME, "%M", "America/Sao_Paulo")})
      )
      (label :class "period" :text "")
      (label :class "today" :text {formattime(EWW_TIME, "%a %b %d", "America/Sao_Paulo")})
    )
  )
)

(defwidget music [] 
  (eventbox 
    :class "music button"
    :onclick "actions media"
    :onscroll "echo {} | sed -e 's/up/next/g' -e 's/down/previous/g' | xargs playerctl -p ${mpris.favorite.name}"
    :visible {mpris.favorite != "null" && mpris.favorite.status != "Stopped"}
    (box
      :class "music"
      :space-evenly false 
      :spacing 8
      :halign "center"
      (label 
        :class "icon ${mpris.favorite.name}"
        :text {mpris.favorite.icon}
      )
      (label :class "title" :text {mpris.favorite.title} :limit-width 30)
    )
  )
)

(defwidget network []
  (eventbox :class "eventbox"
    (button 
      :class "network ${network.status}"
      {network.status == "down" ? "" : ""}
    )
  )
)

(defwidget volume []
  (eventbox :class "volume button"
    :onhover "eww update volume_rev=true" 
    :onhoverlost "eww update volume_rev=false"
    (box
      :class "volume"
      :space-evenly false
      (eventbox
        :cursor "pointer"
        (button 
          :class "icon ${volume.volume}"
          :onscroll "echo {} | xargs volume"
          :onclick "volume toggle"
          {volume.icon}
        )
      )
      (revealer 
        :transition "slideleft" 
        :reveal volume_rev 
        (eventbox
          :cursor "pointer"
          :valign "center"
          (scale
            :class "scale"
            :tooltip {volume.volume == "muted" ? "Muted" : "${volume.volume}%"}
            :value {volume.volume == "muted" ? "0" : volume.volume} 
            :min 0 
            :max 101 
            :onchange "volume set {}"
          )
        )
      )
    )
  )
)

(defwidget workspaces []
  (eventbox :class "workspaces"
    (box 
      :class "button"
      (for workspace in {hyprland.workspaces}
        (eventbox
          :cursor "pointer"
          :onscroll "echo {} | sed -e 's/up/-1/g' -e 's/down/+1/g' | xargs hyprctl dispatch workspace"
          :halign "center" :valign "center" :vexpand true
          (button :onclick "hyprctl dispatch workspace ${workspace.id}"
            :class "workspace ${workspace.id == hyprland.active ? "active" : workspace.windows > 0 ? "occupied" : "empty"}"
          )
        )
      )
    )
  )
)